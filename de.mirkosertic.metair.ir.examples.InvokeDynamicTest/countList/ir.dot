digraph {
 ordering="in";
 node0[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="3">#0 Method</td></tr><tr><td port="prj1" bgcolor="yellow">arg0 : List</td><td port="prj2" bgcolor="yellow">arg1 : int</td><td port="prj3" bgcolor="yellow">this : InvokeDynamicTest</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node4[label="#4 LabelNode",shape=box, fillcolor=lightgrey, style=filled];
 node0 -> node4[labeldistance=2, color=red, fontcolor=red];
 node5[label="#5 Invoke interface stream : ()Stream",shape=box, fillcolor=lightgrey, style=filled];
 node0:prj1 -> node5[headlabel="*0", labeldistance=2];
 node4 -> node5[labeldistance=2, color=red, fontcolor=red];
 node0 -> node5[labeldistance=2, color=green, constraint=false];
 node7[label="#7 Invoke interface filter : (Predicate)Stream",shape=box, fillcolor=lightgrey, style=filled];
 node5 -> node7[headlabel="*0", labeldistance=2];
 node6 -> node7[headlabel="*1", labeldistance=2];
 node6 -> node7[labeldistance=2, color=red, fontcolor=red];
 node6 -> node7[labeldistance=2, color=green, constraint=false];
 node6[label="#6 Invoke dynamic test : (int)Predicate",shape=box, fillcolor=lightgrey, style=filled];
 node17 -> node6[headlabel="*0", labeldistance=2];
 node0:prj2 -> node6[headlabel="*1", labeldistance=2];
 node5 -> node6[labeldistance=2, color=green, constraint=false];
 node5 -> node6[labeldistance=2, color=red, fontcolor=red];
 node17[label="#17 Invoke static metafactory : (MethodHandles$Lookup,String,MethodType,MethodType,MethodHandle,MethodType)CallSite",shape=box, fillcolor=lightgrey, style=filled];
 node14 -> node17[headlabel="*0", labeldistance=2];
 node16 -> node17[headlabel="*1", labeldistance=2];
 node18 -> node17[headlabel="*2", labeldistance=2];
 node11 -> node17[headlabel="*3", labeldistance=2];
 node12 -> node17[headlabel="*4", labeldistance=2];
 node10 -> node17[headlabel="*5", labeldistance=2];
 node13 -> node17[headlabel="*6", labeldistance=2];
 node13[label="#13 MethodType : (Integer)boolean",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node13[style=dotted];
 node10[label="#10 MethodHandle : invokeStatic : InvokeDynamicTest.lambda$countList$0 (int,Integer)boolean",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node10[style=dotted];
 node12[label="#12 MethodType : (Object)boolean",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node12[style=dotted];
 node11[label="#11 MethodType : (int)Predicate",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node11[style=dotted];
 node18[label="#18 String : test",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node18[style=dotted];
 node16[label="#16 Invoke static in : (Class)MethodHandles$Lookup",shape=box, fillcolor=lightgrey, style=filled];
 node15 -> node16[headlabel="*0", labeldistance=2];
 node15 -> node16[headlabel="*1", labeldistance=2];
 node15[label="#15 Class InvokeDynamicTest",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node15[style=dotted];
 node14[label="#14 Class LambdaMetafactory",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node14[style=dotted];
 node8[label="#8 Invoke interface count : ()long",shape=box, fillcolor=lightgrey, style=filled];
 node7 -> node8[headlabel="*0", labeldistance=2];
 node7 -> node8[labeldistance=2, color=red, fontcolor=red];
 node7 -> node8[labeldistance=2, color=green, constraint=false];
 node9[label="#9 ReturnValue : long",shape=box, fillcolor=lightgrey, style=filled];
 node8 -> node9[headlabel="*0", labeldistance=2];
 node8 -> node9[labeldistance=2, color=red, fontcolor=red];
 node8 -> node9[labeldistance=2, color=green, constraint=false];
 subgraph cluster_0 {
  color=lightgray;
  node0;
  node10;
  node11;
  node12;
  node13;
  node14;
  node15;
  node18;
 }
 subgraph cluster_000 {
  label = "Legend";
  node [shape=point]
  {
   rank=same;
   c0 [style = invis];
   c1 [style = invis];
   c2 [style = invis];
   c3 [style = invis];
   d0 [style = invis];
   d1 [style = invis];
   d2 [style = invis];
   d3 [style = invis];
   d4 [style = invis];
   d5 [style = invis];
   d6 [style = invis];
   d7 [style = invis];
  }
  c0 -> c1 [label="Control flow", style=solid, color=red]
  c2 -> c3 [label="Control flow back edge", style=dashed, color=red]
  d0 -> d1 [label="Data flow"]
  d2 -> d3 [label="Declaration", style=dotted]
  d4 -> d5 [label="PHI Data flow", color=blue]
  d6 -> d7 [label="Memory flow", color=green]
 }

}
