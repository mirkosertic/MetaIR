digraph {
 ordering="in";
 node0[label="#0 LocalVariable[name=this, slot=0, type=Lde/mirkosertic/metair/ir/examples/InvokeDynamicTest;] Order: 0", shape=box, fillcolor=lightgrey, style=filled];
 node1[label="#1 LocalVariable[name=list, slot=1, type=Ljava/util/List;] Order: 1", shape=box, fillcolor=lightgrey, style=filled];
 node2[label="#2 LocalVariable[name=min, slot=2, type=I] Order: 2", shape=box, fillcolor=lightgrey, style=filled];
 node3[label="#3 LocalVariableType[name=list, slot=1, signature=Ljava/util/List<Ljava/lang/Integer;>;] Order: 3", shape=box, fillcolor=lightgrey, style=filled];
 node4[label="#4 Label[context=CodeModel[id=1354280589], bci=0] Order: 4", shape=box, fillcolor=lightgrey, style=filled];
 node5[label="#5 LineNumber[line=11] Order: 5", shape=box, fillcolor=lightgrey, style=filled];
 node6[label="#6 Load[OP=ALOAD_1, slot=1] Order: 6", shape=box, fillcolor=lightgrey, style=filled];
 node7[label="#7 InvokeInterface[OP=INVOKEINTERFACE, m=java/util/List.stream()Ljava/util/stream/Stream;] Order: 7", shape=box, fillcolor=lightgrey, style=filled];
 node8[label="#8 Load[OP=ILOAD_2, slot=2] Order: 8", shape=box, fillcolor=lightgrey, style=filled];
 node9[label="#9 InvokeDynamic[OP=INVOKEDYNAMIC, bsm=MethodHandleDesc[STATIC/LambdaMetafactory::metafactory(MethodHandles$Lookup,String,MethodType,MethodType,MethodHandle,MethodType)CallSite] [MethodTypeDesc[(Object)boolean], MethodHandleDesc[STATIC/InvokeDynamicTest::lambda$countList$0(int,Integer)boolean], MethodTypeDesc[(Integer)boolean]]] Order: 9", shape=box, fillcolor=lightgrey, style=filled];
 node10[label="#10 InvokeInterface[OP=INVOKEINTERFACE, m=java/util/stream/Stream.filter(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;] Order: 10", shape=box, fillcolor=lightgrey, style=filled];
 node11[label="#11 InvokeInterface[OP=INVOKEINTERFACE, m=java/util/stream/Stream.count()J] Order: 11", shape=box, fillcolor=lightgrey, style=filled];
 node12[label="#12 Return[OP=LRETURN] Order: 12", shape=box, fillcolor=lightgrey, style=filled];
 node0 -> node0[color=fuchsia];
 node0 -> node1[color=red];
 node1 -> node0[color=fuchsia];
 node1 -> node2[color=red];
 node2 -> node1[color=fuchsia];
 node2 -> node3[color=red];
 node3 -> node2[color=fuchsia];
 node3 -> node4[color=red];
 node4 -> node3[color=fuchsia];
 node4 -> node5[color=red];
 node5 -> node4[color=fuchsia];
 node5 -> node6[color=red];
 node6 -> node5[color=fuchsia];
 node6 -> node7[color=red];
 node7 -> node6[color=fuchsia];
 node7 -> node8[color=red];
 node8 -> node7[color=fuchsia];
 node8 -> node9[color=red];
 node9 -> node8[color=fuchsia];
 node9 -> node10[color=red];
 node10 -> node9[color=fuchsia];
 node10 -> node11[color=red];
 node11 -> node10[color=fuchsia];
 node11 -> node12[color=red];
 node12 -> node11[color=fuchsia];
 subgraph cluster_000 {
  label = "Legend";
  node [shape=point]
  {
   rank=same;
   c0 [style = invis];
   c1 [style = invis];
   c2 [style = invis];
   c3 [style = invis];
  }
  c0 -> c1 [label="Control flow", style=solid, color=red]
  c2 -> c3 [label="Control flow back edge", style=dashed, color=red]
 }

}
