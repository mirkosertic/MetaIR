digraph {
 ordering="in";
 node0[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="1">#0 Method</td></tr><tr><td port="prj1" bgcolor="yellow">this : Test</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node3[label="#3 int 0",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node3[style=dotted];
 node4[label="#4 NumericCondition : EQ",shape=octagon, fillcolor=orange, style=filled];
 node2 -> node4[headlabel="*0", labeldistance=2];
 node3 -> node4[headlabel="*1", labeldistance=2];
 node2[label="#2 int 0",shape=octagon, fillcolor=lightgreen, style=filled];
 node0 -> node2[style=dotted];
 node5[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="2">#5 If</td></tr><tr><td port="prj6" bgcolor="yellow">false</td><td port="prj7" bgcolor="yellow">true</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node4 -> node5[headlabel="*0", labeldistance=2];
 node0 -> node5[labeldistance=2, color=red, fontcolor=red];
 node8[label="#8 Merge : Merge4",shape=box, fillcolor=lightgrey, style=filled];
 node5 -> node8[labeldistance=2, color=red, fontcolor=red];
 node5:prj6 -> node8[labeldistance=2, color=red, fontcolor=red];
 node9[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="3">#9 ExceptionGuard</td></tr><tr><td port="prj10" bgcolor="yellow">catch : 0 : IllegalArgumentException</td><td port="prj13" bgcolor="yellow">default</td><td port="prj12" bgcolor="yellow">exit</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node8 -> node9[labeldistance=2, color=red, fontcolor=red];
 node17[label="#17 int 3",shape=octagon, fillcolor=lightgreen, style=filled];
 node9:prj13 -> node17[style=dotted];
 node16[label="#16 Merge : EndOfGuardedBlock7",shape=box, fillcolor=lightgrey, style=filled];
 node9:prj13 -> node16[labeldistance=2, color=red, fontcolor=red];
 node9:prj12 -> node16[labeldistance=2, color=red, fontcolor=red];
 node18[label="#18 Goto",shape=box, fillcolor=lightgrey, style=filled];
 node16 -> node18[labeldistance=2, color=red, fontcolor=red];
 node19[label="#19 Merge : Merge11",shape=box, fillcolor=lightgrey, style=filled];
 node18 -> node19[labeldistance=2, color=red, fontcolor=red];
 node15 -> node19[labeldistance=2, color=red, fontcolor=red];
 node15[label="#15 LabelNode",shape=box, fillcolor=lightgrey, style=filled];
 node11 -> node15[labeldistance=2, color=red, fontcolor=red];
 node11[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="1">#11 Catch : IllegalArgumentException</td></tr><tr><td port="prj14" bgcolor="yellow">exception : IllegalArgumentException</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node9 -> node11[headlabel="*0", labeldistance=2];
 node9:prj10 -> node11[labeldistance=2, color=red, fontcolor=red];
 node20[label="#20 Return",shape=box, fillcolor=lightgrey, style=filled];
 node19 -> node20[labeldistance=2, color=red, fontcolor=red];
 node0 -> node20[labeldistance=2, color=green, constraint=false];
 subgraph cluster_0 {
  color=lightgray;
  node0;
  node2;
  node3;
 }
 subgraph cluster_1 {
  color=lightgray;
  node17;
 }
 subgraph cluster_000 {
  label = "Legend";
  node [shape=point]
  {
   rank=same;
   c0 [style = invis];
   c1 [style = invis];
   c2 [style = invis];
   c3 [style = invis];
   d0 [style = invis];
   d1 [style = invis];
   d2 [style = invis];
   d3 [style = invis];
   d4 [style = invis];
   d5 [style = invis];
   d6 [style = invis];
   d7 [style = invis];
  }
  c0 -> c1 [label="Control flow", style=solid, color=red]
  c2 -> c3 [label="Control flow back edge", style=dashed, color=red]
  d0 -> d1 [label="Data flow"]
  d2 -> d3 [label="Declaration", style=dotted]
  d4 -> d5 [label="PHI Data flow", color=blue]
  d6 -> d7 [label="Memory flow", color=green]
 }

}
