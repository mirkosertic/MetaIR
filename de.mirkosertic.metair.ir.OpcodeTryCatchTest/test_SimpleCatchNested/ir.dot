digraph {
 ordering="in";
 node0[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="1">#0 Method</td></tr><tr><td port="prj2" bgcolor="yellow">this : Test</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node23[label="#23 Return",shape=box, fillcolor=lightgrey, style=filled];
 node22 -> node23[labeldistance=2, color=red, fontcolor=red];
 node0 -> node23[labeldistance=2, color=green, constraint=false];
 node22[label="#22 Merge : Merge16",shape=box, fillcolor=lightgrey, style=filled];
 node12 -> node22[labeldistance=2, color=red, fontcolor=red];
 node21 -> node22[labeldistance=2, color=red, fontcolor=red];
 node18 -> node22[labeldistance=2, color=red, fontcolor=red];
 node18[label="#18 LabelNode",shape=box, fillcolor=lightgrey, style=filled];
 node14 -> node18[labeldistance=2, color=red, fontcolor=red];
 node14[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="1">#14 Catch : RuntimeException</td></tr><tr><td port="prj17" bgcolor="yellow">exception : RuntimeException</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node11 -> node14[headlabel="*0", labeldistance=2];
 node11:prj13 -> node14[labeldistance=2, color=red, fontcolor=red];
 node11[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="3">#11 ExceptionGuard</td></tr><tr><td port="prj13" bgcolor="yellow">catch : 0 : RuntimeException</td><td port="prj15" bgcolor="yellow">default</td><td port="prj16" bgcolor="yellow">exit</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node8 -> node11[labeldistance=2, color=red, fontcolor=red];
 node8[label="#8 LabelNode",shape=box, fillcolor=lightgrey, style=filled];
 node4 -> node8[labeldistance=2, color=red, fontcolor=red];
 node4[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="1">#4 Catch : IllegalArgumentException</td></tr><tr><td port="prj7" bgcolor="yellow">exception : IllegalArgumentException</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node1 -> node4[headlabel="*0", labeldistance=2];
 node1:prj3 -> node4[labeldistance=2, color=red, fontcolor=red];
 node1[margin="0", label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="5"><tr><td colspan="3">#1 ExceptionGuard</td></tr><tr><td port="prj3" bgcolor="yellow">catch : 0 : IllegalArgumentException</td><td port="prj5" bgcolor="yellow">default</td><td port="prj6" bgcolor="yellow">exit</td></tr></table>>,shape=none, fillcolor=lightgrey, style=filled];
 node0 -> node1[labeldistance=2, color=red, fontcolor=red];
 node9[label="#9 Merge : EndOfGuardedBlock5",shape=box, fillcolor=lightgrey, style=filled];
 node1:prj5 -> node9[labeldistance=2, color=red, fontcolor=red];
 node1:prj6 -> node9[labeldistance=2, color=red, fontcolor=red];
 node10[label="#10 int 3",shape=octagon, fillcolor=lightgreen, style=filled];
 node1:prj5 -> node10[style=dotted];
 node12[label="#12 Goto",shape=box, fillcolor=lightgrey, style=filled];
 node9 -> node12[labeldistance=2, color=red, fontcolor=red];
 node19[label="#19 Merge : EndOfGuardedBlock12",shape=box, fillcolor=lightgrey, style=filled];
 node11:prj15 -> node19[labeldistance=2, color=red, fontcolor=red];
 node11:prj16 -> node19[labeldistance=2, color=red, fontcolor=red];
 node20[label="#20 int 2",shape=octagon, fillcolor=lightgreen, style=filled];
 node11:prj15 -> node20[style=dotted];
 node21[label="#21 Goto",shape=box, fillcolor=lightgrey, style=filled];
 node19 -> node21[labeldistance=2, color=red, fontcolor=red];
 subgraph cluster_0 {
  color=lightgray;
  node20;
 }
 subgraph cluster_1 {
  color=lightgray;
  node10;
 }
 subgraph cluster_000 {
  label = "Legend";
  node [shape=point]
  {
   rank=same;
   c0 [style = invis];
   c1 [style = invis];
   c2 [style = invis];
   c3 [style = invis];
   d0 [style = invis];
   d1 [style = invis];
   d2 [style = invis];
   d3 [style = invis];
   d4 [style = invis];
   d5 [style = invis];
   d6 [style = invis];
   d7 [style = invis];
  }
  c0 -> c1 [label="Control flow", style=solid, color=red]
  c2 -> c3 [label="Control flow back edge", style=dashed, color=red]
  d0 -> d1 [label="Data flow"]
  d2 -> d3 [label="Declaration", style=dotted]
  d4 -> d5 [label="PHI Data flow", color=blue]
  d6 -> d7 [label="Memory flow", color=green]
 }

}
