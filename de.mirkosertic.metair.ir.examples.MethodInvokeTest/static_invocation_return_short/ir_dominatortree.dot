digraph debugoutput {
 ordering="in";
 node0[label="#0 Method Order : 0",shape=box, fillcolor=lightgrey, style=filled];
 node1[label="#1 this : MethodInvokeTest Order : 4",shape=box, fillcolor=lightgrey, style=filled];
 node1 -> node0[dir="forward" color="green" penwidth="2"];
 node0 -> node1[headlabel="*0", labeldistance=2];
 node2[label="#2 LabelNode Order : 3",shape=box, fillcolor=lightgrey, style=filled];
 node2 -> node0[dir="forward" color="green" penwidth="2"];
 node0 -> node2[labeldistance=2, color=red, fontcolor=red];
 node3[label="#3 Class MethodInvokeTest$Source Order : 2",shape=octagon, fillcolor=lightgreen, style=filled];
 node3 -> node0[dir="forward" color="green" penwidth="2"];
 node0 -> node3[style=dotted];
 node4[label="#4 ClassInit Order : 5",shape=box, fillcolor=lightgrey, style=filled];
 node4 -> node0[dir="forward" color="green" penwidth="2"];
 node3 -> node4[headlabel="*0", labeldistance=2];
 node2 -> node4[labeldistance=2, color=red, fontcolor=red];
 node0 -> node4;
 node5[label="#5 New Order : 6",shape=octagon, fillcolor=orange, style=filled];
 node5 -> node4[dir="forward" color="green" penwidth="2"];
 node4 -> node5[headlabel="*0", labeldistance=2];
 node4 -> node5;
 node6[label="#6 Invoke special <init> : ()void Order : 7",shape=box, fillcolor=lightgrey, style=filled];
 node6 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node6[headlabel="*0", labeldistance=2];
 node4 -> node6[labeldistance=2, color=red, fontcolor=red];
 node5 -> node6;
 node7[label="#7 GetField : byte_field : byte Order : 9",shape=octagon, fillcolor=orange, style=filled];
 node7 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node7[headlabel="*0", labeldistance=2];
 node6 -> node7;
 node8[label="#8 GetField : boolean_field : boolean Order : 10",shape=octagon, fillcolor=orange, style=filled];
 node8 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node8[headlabel="*0", labeldistance=2];
 node7 -> node8;
 node9[label="#9 GetField : short_field : short Order : 11",shape=octagon, fillcolor=orange, style=filled];
 node9 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node9[headlabel="*0", labeldistance=2];
 node8 -> node9;
 node10[label="#10 GetField : char_field : char Order : 12",shape=octagon, fillcolor=orange, style=filled];
 node10 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node10[headlabel="*0", labeldistance=2];
 node9 -> node10;
 node11[label="#11 GetField : int_field : int Order : 13",shape=octagon, fillcolor=orange, style=filled];
 node11 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node11[headlabel="*0", labeldistance=2];
 node10 -> node11;
 node12[label="#12 GetField : long_field : long Order : 14",shape=octagon, fillcolor=orange, style=filled];
 node12 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node12[headlabel="*0", labeldistance=2];
 node11 -> node12;
 node13[label="#13 GetField : float_field : float Order : 15",shape=octagon, fillcolor=orange, style=filled];
 node13 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node13[headlabel="*0", labeldistance=2];
 node12 -> node13;
 node14[label="#14 GetField : double_field : double Order : 16",shape=octagon, fillcolor=orange, style=filled];
 node14 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node14[headlabel="*0", labeldistance=2];
 node13 -> node14;
 node15[label="#15 GetField : string_field : String Order : 17",shape=octagon, fillcolor=orange, style=filled];
 node15 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node15[headlabel="*0", labeldistance=2];
 node14 -> node15;
 node16[label="#16 GetField : array_field : int[] Order : 18",shape=octagon, fillcolor=orange, style=filled];
 node16 -> node4[dir="forward" color="green" penwidth="2"];
 node5 -> node16[headlabel="*0", labeldistance=2];
 node15 -> node16;
 node17[label="#17 ClassInit Order : 19",shape=box, fillcolor=lightgrey, style=filled];
 node17 -> node0[dir="forward" color="green" penwidth="2"];
 node21 -> node17[headlabel="*0", labeldistance=2];
 node16 -> node17;
 node20 -> node17[labeldistance=2, color=red, fontcolor=red];
 node18[label="#18 Invoke static simple_method_return_short : (byte,boolean,short,char,int,long,float,double,String,int[])short Order : 20",shape=box, fillcolor=lightgrey, style=filled];
 node18 -> node0[dir="forward" color="green" penwidth="2"];
 node17 -> node18[headlabel="*0", labeldistance=2];
 node7 -> node18[headlabel="*1", labeldistance=2];
 node8 -> node18[headlabel="*2", labeldistance=2];
 node9 -> node18[headlabel="*3", labeldistance=2];
 node10 -> node18[headlabel="*4", labeldistance=2];
 node11 -> node18[headlabel="*5", labeldistance=2];
 node12 -> node18[headlabel="*6", labeldistance=2];
 node13 -> node18[headlabel="*7", labeldistance=2];
 node14 -> node18[headlabel="*8", labeldistance=2];
 node15 -> node18[headlabel="*9", labeldistance=2];
 node16 -> node18[headlabel="*10", labeldistance=2];
 node17 -> node18;
 node17 -> node18[labeldistance=2, color=red, fontcolor=red];
 node19[label="#19 ReturnValue : int Order : 21",shape=box, fillcolor=lightgrey, style=filled];
 node19 -> node18[dir="forward" color="green" penwidth="2"];
 node18 -> node19[headlabel="*0", labeldistance=2];
 node18 -> node19[labeldistance=2, color=red, fontcolor=red];
 node18 -> node19;
 node20[label="#20 LabelNode Order : 8",shape=box, fillcolor=lightgrey, style=filled];
 node20 -> node6[dir="forward" color="green" penwidth="2"];
 node6 -> node20[labeldistance=2, color=red, fontcolor=red];
 node21[label="#21 Class MethodInvokeTest Order : 1",shape=octagon, fillcolor=lightgreen, style=filled];
 node21 -> node0[dir="forward" color="green" penwidth="2"];
 node0 -> node21[style=dotted];
 subgraph cluster_000 {
  label = "Legend";
  node [shape=point]
  {
   rank=same;
   c0 [style = invis];
   c1 [style = invis];
   c2 [style = invis];
   c3 [style = invis];
   d0 [style = invis];
   d1 [style = invis];
   d2 [style = invis];
   d3 [style = invis];
   d4 [style = invis];
   d5 [style = invis];
   d6 [style = invis];
   d7 [style = invis];
  }
  c0 -> c1 [label="Control flow", style=solid, color=red]
  c2 -> c3 [label="Control flow back edge", style=dashed, color=red]
  d0 -> d1 [label="Data flow"]
  d2 -> d3 [label="Declaration", style=dotted]
  d4 -> d5 [label="PHI Data flow", color=blue]
  d6 -> d7 [label="Dominance", color=green]
 }

}
